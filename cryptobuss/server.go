package cryptobuss

import (
	"crypto/ed25519"
	"errors"
	"fmt"
	"log"
	"net/http"
	"sync"

	"github.com/google/uuid"
	"github.com/gorilla/websocket"
	wsrpc "github.com/v-grabko1999/ws-rpc"
	"github.com/v-grabko1999/ws-rpc/wetsock"
)

// ServerCfg –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ (keyID).
type ServerCfg struct {
	SignPriv ed25519.PrivateKey
	KeyID    string

	OnRegistry func(reg *wsrpc.Registry) error

	OnEndpoint func(*http.Request, string, *wsrpc.Endpoint) error

	conn   map[string]*wsrpc.Endpoint
	connMu sync.RWMutex
}

// Server –≤–∏–∫–æ–Ω—É—î websocket-–∞–ø–≥—Ä–µ–π–¥, –∫—Ä–∏–ø—Ç–æ-handshake, —Å—Ç–≤–æ—Ä—é—î Endpoint —ñ –°–ê–ú –∑–∞–ø—É—Å–∫–∞—î Serve().
// OnEndpoint –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤–∂–µ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è endpoint (—ñ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É Serve()),
// —Ç–æ–∂ —É –∫–æ–ª–±–µ–∫—É –ù–ï –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ Serve() –≤–¥—Ä—É–≥–µ.
func Server(cfg *ServerCfg, w http.ResponseWriter, r *http.Request) error {
	if cfg == nil || cfg.SignPriv == nil || len(cfg.SignPriv) == 0 || cfg.KeyID == "" {
		log.Println("[Server] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π SignPriv –∞–±–æ KeyID")
		return errors.New("server config incomplete: SignPriv and KeyID required")
	}

	if cfg.conn == nil {
		cfg.connMu.Lock()
		if cfg.conn == nil { // –ø–æ–¥–≤—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
			cfg.conn = map[string]*wsrpc.Endpoint{}
			log.Println("[Server] —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –º–∞–ø—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å")
		}
		cfg.connMu.Unlock()
	}

	upgrader := websocket.Upgrader{
		// –©–æ–± —Ç–µ—Å—Ç–∏/–ª–æ–∫–∞–ª—å–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –ª–∞–º–∞–ª–∏—Å—å –Ω–∞ CORS
		CheckOrigin: func(*http.Request) bool { return true },
	}

	log.Printf("[Server] ‚á¢ –ó–∞–ø–∏—Ç –∞–ø–≥—Ä–µ–π–¥—É –≤—ñ–¥ %s %s (KeyID=%s)\n", r.RemoteAddr, r.URL.Path, cfg.KeyID)
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("[Server] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–ø–≥—Ä–µ–π–¥—É WebSocket: %v\n", err)
		return err
	}
	log.Println("[Server] ‚úÖ WebSocket –∞–ø–≥—Ä–µ–π–¥ —É—Å–ø—ñ—à–Ω–∏–π")

	// 1) –ö—Ä–∏–ø—Ç–æ-handshake –î–û —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è endpoint
	log.Println("[Server] ‚á¢ –ü–æ—á–∞—Ç–æ–∫ –∫—Ä–∏–ø—Ç–æ-handshake (–±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤)")
	sessionKey, err := performServerHandshake(conn, cfg)
	if err != nil {
		log.Printf("[Server] ‚ùå Handshake failed: %v\n", err)
		_ = conn.Close()
		return fmt.Errorf("handshake failed: %w", err)
	}
	if len(sessionKey) != 32 {
		log.Printf("[Server] ‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ sessionKey: %d\n", len(sessionKey))
		_ = conn.Close()
		return fmt.Errorf("sessionKey length invalid: %d", len(sessionKey))
	}
	log.Println("[Server] ‚úÖ Handshake —É—Å–ø—ñ—à–Ω–∏–π, –∫–ª—é—á —Å–µ—Å—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ")

	// 2) –†–µ—î—Å—Ç—Ä—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
	registry := wsrpc.NewRegistry()
	if cfg.OnRegistry != nil {
		log.Println("[Server] ‚á¢ –í–∏–∫–ª–∏–∫ OnRegistry()")
		if err := cfg.OnRegistry(registry); err != nil {
			log.Printf("[Server] ‚ùå OnRegistry –ø–æ–º–∏–ª–∫–∞: %v\n", err)
			_ = conn.Close()
			return err
		}
		log.Println("[Server] ‚úÖ OnRegistry –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ")
	} else {
		log.Println("[Server] ‚ÑπÔ∏è OnRegistry –Ω–µ –∑–∞–¥–∞–Ω–æ (–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º —Ä–µ—î—Å—Ç—Ä–æ–º)")
	}

	// 3) –°—Ç–≤–æ—Ä—é—î–º–æ Endpoint
	endpoint, err := wetsock.NewEndpoint(registry, conn, string(sessionKey))
	if err != nil {
		log.Printf("[Server] ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Endpoint: %v\n", err)
		_ = conn.Close()
		return err
	}
	id := uuid.NewString()
	log.Printf("[Server] ‚úÖ Endpoint —Å—Ç–≤–æ—Ä–µ–Ω–æ: id=%s\n", id)

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ —ñ–Ω–¥–µ–∫—Å—ñ (—Ä–∞–Ω—ñ—à–µ –±—Ä–∞–∫—É–≤–∞–ª–æ —Ü—å–æ–≥–æ –∫—Ä–æ–∫—É)
	cfg.connMu.Lock()
	cfg.conn[id] = endpoint
	active := len(cfg.conn)
	cfg.connMu.Unlock()
	log.Printf("[Server] üìá –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: id=%s, –∞–∫—Ç–∏–≤–Ω–∏—Ö=%d\n", id, active)

	var wg sync.WaitGroup

	// 4) –°–¢–ê–†–¢–£–Ñ–ú–û Serve() –¢–£–¢, —â–æ–± –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–∏–º –Ω–µ–≥–∞–π–Ω–æ
	wg.Add(1)
	go func() {
		defer wg.Done() // ‚úÖ —Ä–∞–Ω—ñ—à–µ –±—Ä–∞–∫—É–≤–∞–ª–æ ‚Äî —Ç–µ–ø–µ—Ä wg.Wait() –Ω–µ –∑–∞–≤–∏—Å–∞—Ç–∏–º–µ
		defer func() {
			cfg.connMu.Lock()
			delete(cfg.conn, id)
			left := len(cfg.conn)
			cfg.connMu.Unlock()
			log.Printf("[Server] üì¥ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ: id=%s, –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω–∏—Ö=%d\n", id, left)
		}()

		log.Printf("[Server] ‚ñ∂Ô∏è Serve —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –¥–ª—è id=%s\n", id)
		if err := endpoint.Serve(); err != nil && !websocket.IsCloseError(
			err, websocket.CloseNormalClosure, websocket.CloseGoingAway,
		) {
			log.Printf("[Server] ‚ö†Ô∏è Serve error (id=%s): %v\n", id, err)
		}
		log.Printf("[Server] ‚èπ Serve –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è id=%s\n", id)
	}()

	// 5) –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥ endpoint (–±–µ–∑ Serve())
	if cfg.OnEndpoint != nil {
		log.Printf("[Server] ‚á¢ –í–∏–∫–ª–∏–∫ OnEndpoint(id=%s)\n", id)
		if err := cfg.OnEndpoint(r, id, endpoint); err != nil {
			log.Printf("[Server] ‚ùå OnEndpoint –ø–æ–º–∏–ª–∫–∞ (id=%s): %v\n", id, err)
			_ = endpoint.Close()
			return err
		}
		log.Printf("[Server] ‚úÖ OnEndpoint —É—Å–ø—ñ—à–Ω–æ (id=%s)\n", id)
	} else {
		log.Println("[Server] ‚ÑπÔ∏è OnEndpoint –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
	}

	wg.Wait()
	log.Printf("[Server] ‚úÖ –û–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ (id=%s)\n", id)
	return nil
}

func (cfg *ServerCfg) snapshot() map[string]*wsrpc.Endpoint {
	cfg.connMu.RLock()
	defer cfg.connMu.RUnlock()
	cp := make(map[string]*wsrpc.Endpoint, len(cfg.conn))
	for k, v := range cfg.conn {
		cp[k] = v
	}
	return cp
}

func (cfg *ServerCfg) ConnIter(fn func(string, *wsrpc.Endpoint) error) {
	list := cfg.snapshot()
	log.Printf("[Server] üîÅ ConnIter —Å—Ç–∞—Ä—Ç: –≤—Å—å–æ–≥–æ=%d\n", len(list))

	var wg sync.WaitGroup
	for k, ep := range list {
		wg.Add(1)
		go func(id string, e *wsrpc.Endpoint) {
			defer wg.Done()
			if err := fn(id, e); err != nil {
				log.Printf("[Server] ‚ö†Ô∏è ConnIter: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –ø–æ–º–∏–ª–∫—É –¥–ª—è id=%s: %v ‚Äî –≤–∏–¥–∞–ª—è—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n", id, err)
				cfg.connMu.Lock()
				delete(cfg.conn, id)
				left := len(cfg.conn)
				cfg.connMu.Unlock()
				log.Printf("[Server] üìâ –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è id=%s, –∞–∫—Ç–∏–≤–Ω–∏—Ö=%d\n", id, left)
			}
		}(k, ep)
	}
	wg.Wait()
	log.Println("[Server] üîÅ ConnIter –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}

func (cfg *ServerCfg) Broadcast(fn func(string, *wsrpc.Endpoint) error) {
	log.Println("[Server] üì£ Broadcast —Å—Ç–∞—Ä—Ç")
	cfg.ConnIter(fn)
	log.Println("[Server] üì£ Broadcast –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}

func (cfg *ServerCfg) ConnGet(key string) (bool, *wsrpc.Endpoint) {
	cfg.connMu.RLock()
	val, ok := cfg.conn[key]
	cfg.connMu.RUnlock()

	if ok {
		log.Printf("[Server] üîé ConnGet: –∑–Ω–∞–π–¥–µ–Ω–æ id=%s\n", key)
	} else {
		log.Printf("[Server] üîé ConnGet: –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ id=%s\n", key)
	}
	return ok, val
}

func (cfg *ServerCfg) ConnClose(key string) error {
	cfg.connMu.RLock()
	ep, ok := cfg.conn[key]
	cfg.connMu.RUnlock()
	if !ok {
		log.Printf("[Server] üì¥ ConnClose: id=%s –≤–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π\n", key)
		return nil
	}

	log.Printf("[Server] üì¥ –ó–∞–∫—Ä–∏–≤–∞—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è id=%s\n", key)
	if err := ep.Close(); err != nil {
		log.Printf("[Server] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ id=%s: %v\n", key, err)
		return err
	}
	cfg.connMu.Lock()
	delete(cfg.conn, key)
	left := len(cfg.conn)
	cfg.connMu.Unlock()
	log.Printf("[Server] ‚úÖ –ó–∞–∫—Ä–∏—Ç–æ id=%s, –∞–∫—Ç–∏–≤–Ω–∏—Ö=%d\n", key, left)
	return nil
}

func (cfg *ServerCfg) CloseAll() {
	list := cfg.snapshot()
	log.Printf("[Server] üßπ CloseAll: –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è=%d\n", len(list))

	var wg sync.WaitGroup
	for k, ep := range list {
		wg.Add(1)
		go func(id string, e *wsrpc.Endpoint) {
			defer wg.Done()
			log.Printf("[Server] üì¥ –ó–∞–∫—Ä–∏–≤–∞—é id=%s\n", id)
			_ = e.Close()
			cfg.connMu.Lock()
			delete(cfg.conn, id)
			left := len(cfg.conn)
			cfg.connMu.Unlock()
			log.Printf("[Server] ‚úÖ –ó–∞–∫—Ä–∏—Ç–æ id=%s, –∞–∫—Ç–∏–≤–Ω–∏—Ö=%d\n", id, left)
		}(k, ep)
	}
	wg.Wait()
	log.Println("[Server] üßπ CloseAll –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}
