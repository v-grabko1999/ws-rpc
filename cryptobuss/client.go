package cryptobuss

import (
	"errors"
	"fmt"
	"log"
	mrand "math/rand"
	"net/http"
	"sort"
	"strings"
	"time"

	"github.com/gorilla/websocket"
	wsrpc "github.com/v-grabko1999/ws-rpc"
	"github.com/v-grabko1999/ws-rpc/wetsock"
)

type ClientCfg struct {
	HttpHeaders    map[string]string
	Services       []interface{}
	RpcServerURL   string
	OnHttpResponse func(*http.Response) error
	stopped        chan struct{}

	// –ü—ñ–Ω (base64) Ed25519 –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–µ—Ä–≤–µ—Ä–∞
	ServerSignPubBase64 string

	// ---- –ù–û–í–ï: –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º–∏ ----
	// –°–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –ø–æ—Å–ø—ñ–ª—å –º–æ–∂–Ω–∞ –Ω–∞–º–∞–≥–∞—Ç–∏—Å—å –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –ø—ñ—Å–ª—è —Ä–æ–∑—Ä–∏–≤—É (0 = –±–µ–∑–ª—ñ–º—ñ—Ç)
	MaxReconnects int

	// –ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —á–∞—Å—É –Ω–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–¥–Ω–æ–≥–æ —Ä–æ–∑—Ä–∏–≤—É (0 = –±–µ–∑–ª—ñ–º—ñ—Ç)
	// –í–∏–º—ñ—Ä—é—î—Ç—å—Å—è –∑ –º–æ–º–µ–Ω—Ç—É –ø–µ—Ä—à–æ—ó –Ω–µ–≤–¥–∞–ª–æ—ó —Å–ø—Ä–æ–±–∏.
	TotalRetryTimeout time.Duration

	// –ë–∞–∑–æ–≤–∞ –π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∏ backoff (—è–∫—â–æ 0 ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–∏ 500ms/30s)
	BaseDelay time.Duration
	MaxDelay  time.Duration

	// –ß–∞—Å—Ç–∫–∞ –¥–∂–∏—Ç—Ç–µ—Ä–∞ [0..1], –Ω–∞–ø—Ä. 0.5 –æ–∑–Ω–∞—á–∞—î ¬±50% –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ (—è–∫—â–æ 0 ‚Äî –¥–µ—Ñ–æ–ª—Ç 0.5)
	JitterFrac float64

	// –ö–æ–ª–±–µ–∫–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ)
	OnReconnectAttempt func(attempt int, sleep time.Duration, lastErr error) bool
	OnConnected        func(endpoint *wsrpc.Endpoint)                  // –∫–æ–ª–∏ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	OnDisconnected     func(err error)                                 // –∫–æ–ª–∏ Serve() –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
	OnGiveUp           func(reason string, attempt int, lastErr error) // –∫–æ–ª–∏ –ø—Ä–∏–ø–∏–Ω—è—î–º–æ —Å–ø—Ä–æ–±–∏
}

// –æ–±–º–µ–∂–µ–Ω–Ω—è shift‚Äô—ñ–≤, –¥–µ—Ñ–æ–ª—Ç–∏, –¥–∂–∏—Ç—Ç–µ—Ä —ñ ¬´—Å—Ç–µ–ª—è¬ª
func (cfg *ClientCfg) nextBackoff(attempt int) time.Duration {
	base := cfg.BaseDelay
	if base <= 0 {
		base = 500 * time.Millisecond
	}
	maxd := cfg.MaxDelay
	if maxd <= 0 {
		maxd = 30 * time.Second
	}
	// –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ, –∞–ª–µ –∑ –±–µ–∑–ø–µ—á–Ω–æ—é ¬´—Å—Ç–µ–ª–µ—é¬ª
	// 1<<attempt –º–æ–∂–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–∏—Ç–∏—Å—å ‚Äî –æ–±–º–µ–∂–∏–º–æ—Å—è –ø–æ–∫–∏ sleep < maxd
	sleep := base
	for i := 0; i < attempt; i++ {
		sleep *= 2
		if sleep >= maxd {
			sleep = maxd
			break
		}
	}
	jf := cfg.JitterFrac
	if jf <= 0 || jf > 1 {
		jf = 0.5
	}
	// –¥–∂–∏—Ç—Ç–µ—Ä —É –º–µ–∂–∞—Ö ¬±jf
	// –Ω–∞–ø—Ä., jf=0.5 ‚Üí –¥—ñ–∞–ø–∞–∑–æ–Ω [0.5..1.5]*sleep
	delta := time.Duration(float64(sleep) * jf)
	low := sleep - delta
	high := sleep + delta
	if high <= low {
		return sleep
	}
	// rand —É –≤–∂–µ –∑–∞—Å—ñ—è–Ω–æ–º—É mrand
	jitter := time.Duration(mrand.Int63n(int64(high-low))) + low
	if jitter > maxd {
		jitter = maxd
	}
	if jitter < 0 {
		jitter = 0
	}
	return jitter
}

func Client(keyID string, cfg *ClientCfg) error {
	if cfg == nil || cfg.ServerSignPubBase64 == "" {
		log.Println("[Client] ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: ServerSignPubBase64 –ø–æ—Ä–æ–∂–Ω—ñ–π")
		return errors.New("client config: ServerSignPubBase64 required")
	}
	cfg.stopped = make(chan struct{}, 1)
	mrand.Seed(time.Now().UnixNano())

	registry := wsrpc.NewRegistry()
	for i, s := range cfg.Services {
		registry.RegisterService(s)
		log.Printf("[Client] üîå –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å #%d\n", i+1)
	}

	// –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–ª–æ–≥—É—é –ª–∏—à–µ –∫–ª—é—á—ñ, –±–µ–∑ –∑–Ω–∞—á–µ–Ω—å)
	h := http.Header{}
	if n := len(cfg.HttpHeaders); n > 0 {
		for k, v := range cfg.HttpHeaders {
			h.Set(k, v)
		}
		log.Printf("[Client] üì® –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –∑–∞–ø–∏—Ç—É: %v\n", headerKeysOnly(cfg.HttpHeaders))
	}

	wsScheme := "ws"
	if strings.HasPrefix(cfg.RpcServerURL, "https://") {
		wsScheme = "wss"
	}
	wsURL := fmt.Sprintf("%s://%s/rpc-cryptobuss", wsScheme, strings.TrimPrefix(strings.TrimPrefix(cfg.RpcServerURL, "http://"), "https://"))
	log.Printf("[Client] üåê WebSocket URL: %s (scheme=%s)\n", wsURL, wsScheme)

	attempt := 0
	var deadline time.Time
	var lastErr error
	var sessions uint64 // –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–µ—Å—ñ–π –ø—ñ–¥–∫–ª—é—á–µ–Ω—å

	// –ª–æ–∫–∞–ª—å–Ω–∏–π —Ö–µ–ª–ø–µ—Ä –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑—ñ –≤—Å—ñ–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
	waitOrStop := func(sleep time.Duration, reason string) bool {
		if !deadline.IsZero() && time.Now().Add(sleep).After(deadline) {
			if cfg.OnGiveUp != nil {
				cfg.OnGiveUp("total-timeout", attempt, lastErr)
			}
			log.Printf("[Client] ‚è±Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —á–∞—Å—É –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω—å (%s). –ó–∞–≤–µ—Ä—à—É—é.\n", reason)
			return false
		}
		select {
		case <-cfg.stopped:
			if cfg.OnGiveUp != nil {
				cfg.OnGiveUp("stopped", attempt, lastErr)
			}
			log.Println("[Client] ‚èπ –û—Ç—Ä–∏–º–∞–Ω–æ Stop() ‚Äî –≤–∏—Ö—ñ–¥")
			return false
		case <-time.After(sleep):
			return true
		}
	}

	for {
		// ¬´–º‚Äô—è–∫–∏–π¬ª –≤–∏—Ö—ñ–¥
		select {
		case <-cfg.stopped:
			log.Println("[Client] ‚èπ –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω–∞ –¥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ‚Äî –≤–∏—Ö—ñ–¥")
			return nil
		default:
		}

		log.Printf("[Client] ‚ñ∂Ô∏è –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è #%d –¥–æ %s ...\n", attempt+1, wsURL)

		conn, res, err := websocket.DefaultDialer.Dial(wsURL, h)
		if err != nil {
			lastErr = err
			log.Printf("[Client] ‚ùå Dial error (attempt=%d): %v\n", attempt+1, err)

			// —Å—Ç–∞—Ä—Ç—É—î–º–æ –≤—ñ–∫–Ω–æ TotalRetryTimeout –∑ –ø–µ—Ä—à–æ–≥–æ —Ñ–µ–π–ª—É
			if attempt == 0 && cfg.TotalRetryTimeout > 0 && deadline.IsZero() {
				deadline = time.Now().Add(cfg.TotalRetryTimeout)
				log.Printf("[Client] ‚è±Ô∏è –°—Ç–∞—Ä—Ç –≤—ñ–∫–Ω–∞ TotalRetryTimeout: %s\n", cfg.TotalRetryTimeout)
			}

			// –ª—ñ–º—ñ—Ç —Å–ø—Ä–æ–±?
			if cfg.MaxReconnects > 0 && attempt >= cfg.MaxReconnects {
				if cfg.OnGiveUp != nil {
					cfg.OnGiveUp("max-reconnects", attempt, lastErr)
				}
				return fmt.Errorf("dial failed: %w (max reconnects reached)", err)
			}

			sleep := cfg.nextBackoff(attempt)
			log.Printf("[Client] üí§ Backoff –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é: %s (attempt=%d)\n", sleep, attempt+1)

			if cfg.OnReconnectAttempt != nil {
				if !cfg.OnReconnectAttempt(attempt+1, sleep, lastErr) {
					log.Println("[Client] üõë OnReconnectAttempt –ø–æ–≤–µ—Ä–Ω—É–≤ false ‚Äî –ø—Ä–∏–ø–∏–Ω—è—é")
					cfg.OnGiveUp("max-reconnects", attempt, lastErr)
					return nil
				}
			}
			attempt++
			if !waitOrStop(sleep, "dial-backoff") {
				return nil
			}
			continue
		}

		// dial ok ‚Üí —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
		attempt = 0
		deadline = time.Time{}
		sessions++
		log.Printf("[Client] ‚úÖ Dial —É—Å–ø—ñ—à–Ω–∏–π (session=%d)\n", sessions)

		// –ö–æ–ª–±–µ–∫ –∑ HTTP-–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é (—Ä—É–∫–æ—Å—Ç–∏—Å–∫–∞–Ω–Ω—è)
		if cfg.OnHttpResponse != nil {
			log.Printf("[Client] ‚á¢ OnHttpResponse: status=%s, code=%d\n", res.Status, res.StatusCode)
			if err = cfg.OnHttpResponse(res); err != nil {
				lastErr = err
				log.Printf("[Client] ‚ùå OnHttpResponse –ø–æ–º–∏–ª–∫–∞: %v\n", err)
				_ = conn.Close()

				if cfg.MaxReconnects > 0 && attempt >= cfg.MaxReconnects {
					if cfg.OnGiveUp != nil {
						cfg.OnGiveUp("max-reconnects", attempt, lastErr)
					}
					return fmt.Errorf("OnHttpResponse: %w", err)
				}
				sleep := cfg.nextBackoff(attempt)
				log.Printf("[Client] üí§ Backoff –ø—ñ—Å–ª—è OnHttpResponse: %s (attempt=%d)\n", sleep, attempt+1)

				if cfg.OnReconnectAttempt != nil {
					if !cfg.OnReconnectAttempt(attempt+1, sleep, lastErr) {
						log.Println("[Client] üõë OnReconnectAttempt=false –ø—ñ—Å–ª—è OnHttpResponse ‚Äî –ø—Ä–∏–ø–∏–Ω—è—é")
						cfg.OnGiveUp("max-reconnects", attempt, lastErr)
						return nil
					}
				}
				attempt++
				if !waitOrStop(sleep, "http-response") {
					return nil
				}
				continue
			}
		}

		log.Printf("[Client] ‚á¢ –ü–æ—á–∞—Ç–æ–∫ –∫—Ä–∏–ø—Ç–æ-handshake (session=%d)\n", sessions)
		sessionKey, err := performClientHandshake(conn, cfg.ServerSignPubBase64, keyID)
		if err != nil || len(sessionKey) != 32 {
			if err == nil {
				err = fmt.Errorf("invalid session key length: %d", len(sessionKey))
			}
			lastErr = err
			log.Printf("[Client] ‚ùå Handshake failed: %v\n", err)
			_ = conn.Close()

			if attempt == 0 && cfg.TotalRetryTimeout > 0 && deadline.IsZero() {
				deadline = time.Now().Add(cfg.TotalRetryTimeout)
				log.Printf("[Client] ‚è±Ô∏è –°—Ç–∞—Ä—Ç TotalRetryTimeout: %s\n", cfg.TotalRetryTimeout)
			}
			if cfg.MaxReconnects > 0 && attempt >= cfg.MaxReconnects {
				if cfg.OnGiveUp != nil {
					cfg.OnGiveUp("max-reconnects", attempt, lastErr)
				}
				return fmt.Errorf("handshake failed: %w", err)
			}
			sleep := cfg.nextBackoff(attempt)
			log.Printf("[Client] üí§ Backoff –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ handshake: %s (attempt=%d)\n", sleep, attempt+1)

			if cfg.OnReconnectAttempt != nil {
				if !cfg.OnReconnectAttempt(attempt+1, sleep, lastErr) {
					log.Println("[Client] üõë OnReconnectAttempt=false –ø—ñ—Å–ª—è handshake ‚Äî –ø—Ä–∏–ø–∏–Ω—è—é")
					cfg.OnGiveUp("max-reconnects", attempt, lastErr)
					return nil
				}
			}
			attempt++
			if !waitOrStop(sleep, "handshake") {
				return nil
			}
			continue
		}
		log.Printf("[Client] ‚úÖ Handshake —É—Å–ø—ñ—à–Ω–∏–π (session=%d)\n", sessions)

		endpoint, err := wetsock.NewEndpoint(registry, nil, conn, string(sessionKey))
		if err != nil {
			lastErr = err
			log.Printf("[Client] ‚ùå NewEndpoint error: %v\n", err)
			_ = conn.Close()

			if attempt == 0 && cfg.TotalRetryTimeout > 0 && deadline.IsZero() {
				deadline = time.Now().Add(cfg.TotalRetryTimeout)
				log.Printf("[Client] ‚è±Ô∏è –°—Ç–∞—Ä—Ç TotalRetryTimeout: %s\n", cfg.TotalRetryTimeout)
			}
			if cfg.MaxReconnects > 0 && attempt >= cfg.MaxReconnects {
				if cfg.OnGiveUp != nil {
					cfg.OnGiveUp("max-reconnects", attempt, lastErr)
				}
				return fmt.Errorf("NewEndpoint: %w", err)
			}
			sleep := cfg.nextBackoff(attempt)
			log.Printf("[Client] üí§ Backoff –ø—ñ—Å–ª—è NewEndpoint: %s (attempt=%d)\n", sleep, attempt+1)

			if cfg.OnReconnectAttempt != nil {
				if !cfg.OnReconnectAttempt(attempt+1, sleep, lastErr) {
					log.Println("[Client] üõë OnReconnectAttempt=false –ø—ñ—Å–ª—è NewEndpoint ‚Äî –ø—Ä–∏–ø–∏–Ω—è—é")
					cfg.OnGiveUp("max-reconnects", attempt, lastErr)
					return nil
				}
			}
			attempt++
			if !waitOrStop(sleep, "new-endpoint") {
				return nil
			}
			continue
		}

		log.Printf("[Client] üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ (session=%d). –ó–∞–ø—É—Å–∫–∞—é Serve() ...\n", sessions)
		if cfg.OnConnected != nil {
			cfg.OnConnected(endpoint)
		}

		// –ë–ª–æ–∫—É—î–º–æ—Å—å —É Serve() –¥–æ —Ä–æ–∑—Ä–∏–≤—É
		if err := endpoint.Serve(); err != nil {
			lastErr = err
			log.Printf("[Client] ‚ö†Ô∏è Serve –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: %v (session=%d)\n", err, sessions)
			if cfg.OnDisconnected != nil {
				cfg.OnDisconnected(err)
			}
		} else {
			log.Printf("[Client] ‚èπ Serve –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ (session=%d)\n", sessions)
			if cfg.OnDisconnected != nil {
				cfg.OnDisconnected(nil)
			}
		}

		// –ø—ñ—Å–ª—è —Ä–æ–∑—Ä–∏–≤—É ‚Äî –ø–∞—É–∑–∞ –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏ (–º‚Äô—è–∫–∏–π ¬´cooldown¬ª, –Ω–µ backoff)
		cooldown := 1*time.Second + time.Duration(mrand.Int63n(int64(1000*time.Millisecond)))
		log.Printf("[Client] üßä Cooldown –º—ñ–∂ —Å–µ—Å—ñ—è–º–∏: %s\n", cooldown)
		select {
		case <-cfg.stopped:
			log.Println("[Client] ‚èπ Stop() –ø—ñ–¥ —á–∞—Å cooldown ‚Äî –∑–∞–∫—Ä–∏–≤–∞—é endpoint —ñ –≤–∏—Ö–æ–¥–∂—É")
			_ = endpoint.Close()
			return nil
		case <-time.After(cooldown):
		}

		// –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω—å —Å—Ç–∞—Ä—Ç—É—î–º–æ –±—é–¥–∂–µ—Ç —á–∞—Å—É
		attempt = 0
		deadline = time.Time{}
		log.Println("[Client] üîÅ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω—å")
	}
}

func (cfg *ClientCfg) Stop() {
	if cfg == nil || cfg.stopped == nil {
		return
	}
	select {
	case cfg.stopped <- struct{}{}:
		log.Println("[Client] ‚èπ Stop() –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
	default:
		log.Println("[Client] ‚èπ Stop() –≤–∂–µ –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Ä–∞–Ω—ñ—à–µ")
	}
}

// –î–æ–ø–æ–º—ñ–∂–Ω–µ: –ø–æ–≤–µ—Ä—Ç–∞—î –ª–∏—à–µ –ø–µ—Ä–µ–ª—ñ–∫ –∫–ª—é—á—ñ–≤ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
func headerKeysOnly(h map[string]string) []string {
	keys := make([]string, 0, len(h))
	for k := range h {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	return keys
}
